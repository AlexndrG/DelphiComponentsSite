{"version":3,"sources":["utils/ShowComponent/ShowComponent.module.css","utils/ShowResult/ShowResult.module.css","components/BitBtn/BitBtn.module.css","components/Memo/Memo.module.css","components/GroupBox/GroupBox.module.css","utils/ShowComponent/ShowComponent.tsx","utils/ShowResult/ShowResult.tsx","components/Label/Label.tsx","components/Edit/Edit.tsx","components/CheckBox/CheckBox.tsx","components/BitBtn/BitBtn.tsx","components/Memo/Memo.tsx","components/ComboBox/ComboBox.tsx","components/GroupBox/GroupBox.tsx","App.tsx","index.tsx"],"names":["module","exports","ShowComponent","props","className","styles","block","name","body","children","ShowResult","resultText","result","Label","style","caption","Edit","title","textAlignmentRight","text","restProps","value","CheckBox","type","BitBtn","image","imageWidth","imageHeight","imageStyle","width","height","src","alt","Memo","lines","textarea","join","ComboBox","items","itemIndex","onMouseDown","onKeyDown","onBlur","onChange","useState","index","setIndex","selected","setSelected","selectStyle","minWidth","onMouseKeyDown","e","code","currentTarget","map","item","i","GroupBox","App","edit1","setEdit1","edit2","setEdit2","checkBox1","setCheckBox1","checkBox2","setCheckBox2","memo1","setMemo1","comboBoxItems1","comboBoxItemIndex1","setComboBoxItemIndex1","comboBoxItems2","comboBoxItemIndex2","setComboBoxItemIndex2","color","checked","onClick","alert","rows","cols","split","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fba2d0e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"ShowComponent_block__11O8O\",\"name\":\"ShowComponent_name__9rbjd\",\"body\":\"ShowComponent_body__2AvZ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"ShowResult_block__1z30j\",\"resultText\":\"ShowResult_resultText__2yBac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"BitBtn_block__3EK9q\",\"image\":\"BitBtn_image__13fCA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Memo_textarea__2YXkc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"GroupBox_block__2HqhI\"};","import React from 'react'\r\nimport styles from './ShowComponent.module.css'\r\n\r\n\r\ntype ShowComponentPropsType = {\r\n    name: string\r\n}\r\n\r\nexport const ShowComponent: React.FC<ShowComponentPropsType> = (props) => {\r\n    return (\r\n        <div className={styles.block}>\r\n            <div className={styles.name}>\r\n                {props.name}\r\n            </div>\r\n\r\n            <div className={styles.body}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport styles from './ShowResult.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    result: string\r\n}\r\n\r\nexport const ShowResult = (props: PropsType) => {\r\n    return (\r\n        <div className={styles.block}>\r\n            <b>Result: </b>\r\n            <span className={styles.resultText}>{props.result}</span>\r\n        </div>\r\n    )\r\n}","import React, {DetailedHTMLProps, HTMLAttributes} from 'react'\r\nimport styles from './Label.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultLabelPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype LabelPropsType = DefaultLabelPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    caption: string\r\n}\r\n\r\nexport const Label: React.FC<LabelPropsType> = (props) => {\r\n    return (\r\n        <span style={props.style}>\r\n            {props.caption}\r\n        </span>\r\n    )\r\n}","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport styles from './Edit.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype EditPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    title?: string\r\n    textAlignmentRight?: boolean\r\n    text: string\r\n}\r\n\r\nexport const Edit: React.FC<EditPropsType> = (props) => {\r\n    const {\r\n        title = '',\r\n        textAlignmentRight = false,\r\n        text,\r\n        value,\r\n        ...restProps\r\n    } = props\r\n\r\n    return (\r\n        <label>\r\n            {!textAlignmentRight && <span>{title}</span>}\r\n            <input\r\n                value={text}\r\n                {...restProps}\r\n            />\r\n            {textAlignmentRight && <span>{title}</span>}\r\n        </label>\r\n    )\r\n}","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport styles from './CheckBox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype CheckBoxPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    textAlignmentRight?: boolean\r\n    caption: string\r\n}\r\n\r\nexport const CheckBox: React.FC<CheckBoxPropsType> = (props) => {\r\n    const {\r\n        textAlignmentRight,\r\n        caption,\r\n        type,\r\n        ...restProps\r\n    } = props\r\n\r\n    return (\r\n        <label>\r\n            {!textAlignmentRight && caption}\r\n            <input\r\n                type={'checkbox'}\r\n                {...restProps}\r\n            />\r\n            {textAlignmentRight && caption}\r\n        </label>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport styles from './BitBtn.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype BitBtnPropsType = DefaultButtonPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    caption: string\r\n    image?: string\r\n    imageWidth?: number\r\n    imageHeight?: number\r\n}\r\n\r\nexport const BitBtn: React.FC<BitBtnPropsType> = (props) => {\r\n    const {\r\n        caption,\r\n        image,\r\n        imageWidth = 20,\r\n        imageHeight = 20,\r\n        ...restProps\r\n    } = props\r\n\r\n    const imageStyle = {\r\n        width: imageWidth,\r\n        height: imageHeight,\r\n    }\r\n\r\n    return (\r\n        <button\r\n            {...restProps}\r\n        >\r\n            <div className={styles.block}>\r\n                {image && <img\r\n                    className={styles.image}\r\n                    style={imageStyle}\r\n                    src={image}\r\n                    alt={'BitBtn'}\r\n                />}\r\n                {caption}\r\n            </div>\r\n        </button>\r\n    )\r\n}","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react'\r\nimport styles from './Memo.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultTextareaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype MemoPropsType = DefaultTextareaPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    lines?: Array<string>\r\n}\r\n\r\nexport const Memo: React.FC<MemoPropsType> = (props) => {\r\n    const {\r\n        lines = [],\r\n        value,\r\n        ...restProps\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <textarea\r\n                className={styles.textarea}\r\n                // value={lines.join('\\r\\n')}\r\n                value={lines.join('\\n')}\r\n                {...restProps}\r\n            />\r\n        </>\r\n    )\r\n}","import React, {DetailedHTMLProps, SelectHTMLAttributes, useState} from 'react'\r\nimport styles from './ComboBox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype ComboBoxPropsType = DefaultSelectPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    items?: Array<string>\r\n    itemIndex?: number\r\n    width?: number\r\n}\r\n\r\nexport const ComboBox: React.FC<ComboBoxPropsType> = (props) => {\r\n    const {\r\n        items = [],\r\n        itemIndex = 0,\r\n        width = 0,\r\n        style = {},\r\n\r\n        onMouseDown,\r\n        onKeyDown,\r\n        onBlur,\r\n        onChange,\r\n\r\n        ...restProps\r\n    } = props\r\n\r\n    const [index, setIndex] = useState(itemIndex)\r\n    const [selected, setSelected] = useState(itemIndex > 0 ? true : false)\r\n\r\n    const selectStyle = {\r\n        minWidth: width,\r\n    }\r\n\r\n    const onMouseKeyDown = () => {\r\n        if (index < 0) {\r\n            setIndex(0)\r\n        } else {\r\n            !selected && setIndex(-1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <select\r\n            style={{...style, ...selectStyle}}\r\n            value={index}\r\n\r\n            onMouseDown={(e) => {\r\n                onMouseKeyDown()\r\n                onMouseDown && onMouseDown(e)\r\n            }}\r\n\r\n            onKeyDown={(e) => {\r\n                const code = e.code\r\n                if (code === 'Enter' || code === 'Space') {\r\n                    onMouseKeyDown()\r\n                }\r\n                onKeyDown && onKeyDown(e)\r\n            }}\r\n\r\n            onBlur={(e) => {\r\n                !selected && setIndex(-1)\r\n                onBlur && onBlur(e)\r\n            }}\r\n\r\n            onChange={(e) => {\r\n                setSelected(true)\r\n                setIndex(+e.currentTarget.value)\r\n                onChange && onChange(e)\r\n            }}\r\n\r\n            {...restProps}\r\n        >\r\n            {(index >= 0) && items.map((item, i) =>\r\n                <option key={i} value={i}>\r\n                    {item}\r\n                </option>\r\n            )}\r\n        </select>\r\n    )\r\n}","import React, {DetailedHTMLProps, HTMLAttributes, ReactNode} from 'react'\r\nimport styles from './GroupBox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultDivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтобы не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype GroupBoxPropsType = DefaultDivPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n}\r\n\r\nexport const GroupBox: React.FC<GroupBoxPropsType> = (props) => {\r\n    const {\r\n        children,\r\n        ...restProps\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={styles.block}\r\n            {...restProps}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {ShowComponent} from './utils/ShowComponent/ShowComponent';\nimport {ShowResult} from './utils/ShowResult/ShowResult';\nimport {Label} from './components/Label/Label';\nimport {Edit} from './components/Edit/Edit';\nimport {CheckBox} from './components/CheckBox/CheckBox';\nimport {BitBtn} from './components/BitBtn/BitBtn';\nimport {Memo} from './components/Memo/Memo';\nimport {ComboBox} from './components/ComboBox/ComboBox';\nimport {GroupBox} from './components/GroupBox/GroupBox';\n\nfunction App() {\n    const [edit1, setEdit1] = useState('Edit text with Title1')\n    const [edit2, setEdit2] = useState('Edit text without Title2')\n\n    const [checkBox1, setCheckBox1] = useState(false)\n    const [checkBox2, setCheckBox2] = useState(false)\n\n    const [memo1, setMemo1] = useState(['Memo text1', 'Memo text2'])\n\n    const comboBoxItems1 = ['line1', 'line2', 'line3', 'line4', 'line5', 'line6', 'line7', 'line8', 'line9']\n    const [comboBoxItemIndex1, setComboBoxItemIndex1] = useState(-1)\n    const comboBoxItems2 = ['line12', 'line22', 'line32', 'line42', 'line52', 'line62', 'line72', 'line82', 'line92']\n    const [comboBoxItemIndex2, setComboBoxItemIndex2] = useState(4)\n\n    return (\n        <div className=\"App\">\n            <ShowComponent name={'Label'}>\n                <Label caption={'Label text'}/>\n            </ShowComponent>\n\n\n            <ShowComponent name={'Edit'}>\n                <Edit\n                    title={' Edit with title RightJustify'}\n                    textAlignmentRight={true}\n                    text={edit1}\n                    onChange={(e) => setEdit1(e.currentTarget.value)}\n                />\n                <ShowResult result={edit1}/>\n                <hr color={'green'}/>\n\n                <Edit\n                    title={'Edit with title LeftJustify '}\n                    textAlignmentRight={false}\n                    text={edit1}\n                    onChange={(e) => setEdit1(e.currentTarget.value)}\n                />\n                <ShowResult result={edit1}/>\n                <hr color={'green'}/>\n\n                <Edit\n                    text={edit2}\n                    onChange={(e) => setEdit2(e.currentTarget.value)}\n                />\n                <ShowResult result={edit2}/>\n            </ShowComponent>\n\n\n            <ShowComponent name={'CheckBox'}>\n                <CheckBox\n                    caption={'CheckBox RightJustify'}\n                    textAlignmentRight={true}\n                    checked={checkBox1}\n                    onChange={(e) => setCheckBox1(e.currentTarget.checked)}\n                />\n                <ShowResult result={checkBox1 ? 'checked' : 'unChecked'}/>\n                <hr color={'green'}/>\n\n                <CheckBox\n                    caption={'CheckBox LeftJustify'}\n                    textAlignmentRight={false}\n                    checked={checkBox2}\n                    onChange={(e) => setCheckBox2(e.currentTarget.checked)}\n                />\n                <ShowResult result={checkBox2 ? 'checked' : 'unChecked'}/>\n            </ShowComponent>\n\n\n            <ShowComponent name={'BitBtn'}>\n                <BitBtn\n                    caption={'BitButton with Image'}\n                    image={'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Approve_icon.svg/1200px-Approve_icon.svg.png'}\n                    imageWidth={40}\n                    imageHeight={40}\n                    onClick={() => alert('Button pressed!')}\n                />\n                <hr color={'green'}/>\n\n                <BitBtn\n                    caption={'BitButton without Image'}\n                    onClick={() => alert('Button pressed!')}\n                />\n            </ShowComponent>\n\n\n            <ShowComponent name={'Memo'}>\n                <Memo\n                    lines={memo1}\n                    rows={5}\n                    cols={75}\n                    onChange={(e) => setMemo1(e.currentTarget.value.split('\\n'))}\n                />\n                <ShowResult result={memo1.join('\\n')}/>\n            </ShowComponent>\n\n\n            <ShowComponent name={'ComboBox'}>\n                <ComboBox\n                    items={comboBoxItems1}\n                    itemIndex={comboBoxItemIndex1}\n                    width={200}\n                    onChange={(e) => setComboBoxItemIndex1(+e.currentTarget.value)}\n                />\n                <ShowResult result={comboBoxItems1[comboBoxItemIndex1]}/>\n                <hr color={'green'}/>\n\n                <ComboBox\n                    items={comboBoxItems2}\n                    itemIndex={comboBoxItemIndex2}\n                    width={200}\n                    onChange={(e) => setComboBoxItemIndex2(+e.currentTarget.value)}\n                />\n                <ShowResult result={comboBoxItems2[comboBoxItemIndex2]}/>\n            </ShowComponent>\n\n\n            <ShowComponent name={'GroupBox'}>\n                <GroupBox style={{width: '750px'}}>\n                    <Edit\n                        title={'GroupBox Test '}\n                        text={'GroupBox Test'}\n                    />\n                    <BitBtn\n                        caption={'GroupBox Test'}\n                        onClick={() => alert('GroupBox Test!')}\n                    />\n                    <p/>\n                    <Memo\n                        lines={['GroupBox', 'Test']}\n                    />\n                </GroupBox>\n            </ShowComponent>\n\n\n\n\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}